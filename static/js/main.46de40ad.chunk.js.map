{"version":3,"sources":["components/Input.js","components/Card.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Input","searchChange","className","type","placeholder","onChange","Card","data","alt","src","fullname","gender","ethnicity","App","this","props","onSearchChange","dataVal","isPending","Component","connect","state","input","sendData","requestData","error","dispatch","event","payload","target","value","payload2","fetch","then","response","json","catch","Boolean","window","location","hostname","match","initialInputState","button","initialData","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"0SAceA,EAZD,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAEZ,OACI,6BACI,2BAAOC,UAAU,iCACjBC,KAAK,OACLC,YAAY,YACXC,SAAUJ,MCORK,EAdF,SAAC,GAAY,IAAXC,EAAU,EAAVA,KAEX,OACI,yBAAKL,UAAU,oDACX,yBAAKM,IAAI,eAAeC,IAAG,+BAA0BF,EAAKG,SAA/B,cAC3B,6BACI,sCAAYH,EAAKG,SAAjB,KACA,sCAAYH,EAAKI,OAAjB,KACA,yCAAeJ,EAAKK,UAApB,QCmBVC,G,6KAGK,IAAD,EACoCC,KAAKC,MAAxCC,EADD,EACCA,eAAgBT,EADjB,EACiBA,KACnBU,EAAU,GAOZ,OALAA,EAJI,EACuBC,UAGjB,GAEAX,EAIR,yBAAKL,UAAU,MACb,4CACA,kBAAC,EAAD,CAAOD,aAAce,IACrB,6BAAK,6BACL,kBAAC,EAAD,CAAMT,KAAMU,S,GAjBJE,cAyBHC,eA9CS,SAAAC,GACtB,MAAM,CACJC,MAAOD,EAAME,SAASD,MACtBf,KAAMc,EAAMG,YAAYjB,KACxBW,UAAWG,EAAMG,YAAYN,UAC7BO,MAAOJ,EAAMG,YAAYC,UAIF,SAACC,GAE1B,MAAO,CACLV,eAAgB,SAACW,GCZG,IASIjB,EDItBgB,ECb6B,CAC/BvB,KCT+B,sBDU/ByB,QDWoBD,EAAME,OAAOC,MCVjCC,UAAU,IDWRL,GCLsBhB,EDKDiB,EAAME,OAAOC,MCLC,SAACJ,GACtCA,EAAS,CAACvB,KChBsB,yBDiBhC6B,MAAM,0CAAD,OAA2CtB,IAC/CuB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAA1B,GAAI,OAAImB,EAAS,CAACvB,KClBQ,uBDkBoByB,QAASrB,OAC5D6B,OAAM,SAAAX,GAAK,OAAIC,EAAS,CAACvB,KClBK,sBDkBsByB,QAASH,cDgCnDL,CAA4CP,G,MG1CvCwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVN,IAAMC,EAAoB,CACtBpB,MAAO,GACPqB,QAAQ,GAaNC,EAAc,CAChB1B,WAAW,EACXX,KAAM,GACNkB,MAAO,ICbLoB,EAASC,yBACTC,EAAcC,YAAgB,CAACzB,SDDb,WAAyC,IAAxCF,EAAuC,uDAAjCqB,EAAmBO,EAAc,uDAAP,GACrD,OAAOA,EAAO9C,MACV,IFf2B,sBEgB3B,OAAO+C,OAAOC,OAAO,GAAI9B,EAAO,CAACC,MAAM2B,EAAOrB,QAASe,OAAOM,EAAOlB,WACrE,QACI,OAAOV,ICJ4BG,YDgBpB,WAAmC,IAAlCH,EAAiC,uDAA3BuB,EAAaK,EAAc,uDAAP,GAClD,OAAOA,EAAO9C,MACV,IF9B4B,uBE+BxB,OAAO+C,OAAOC,OAAO,GAAI9B,EAAO,CAACH,WAAW,IAChD,IF/B4B,uBEgCxB,OAAOgC,OAAOC,OAAO,GAAI9B,EAAO,CAACd,KAAM0C,EAAOrB,QAASV,WAAW,IACtE,IFhC2B,sBEiCvB,OAAOgC,OAAOC,OAAO,GAAI9B,EAAO,CAACI,MAAOwB,EAAOrB,QAASV,WAAU,IAClE,QACI,OAAOG,MCxBjB+B,EAAQC,YAAYN,EAAaO,YAAgBC,IAAiBV,IACxEW,IAASC,OACP,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,OAEFM,SAASC,eAAe,SF+GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEd5B,OAAM,SAAAX,GACLwC,QAAQxC,MAAMA,EAAMyC,c","file":"static/js/main.46de40ad.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Input = ({searchChange}) => {\r\n\r\n    return (\r\n        <div>\r\n            <input className='pa3 ba b--blue bg-light-yellow'\r\n            type='text' \r\n            placeholder='Full name'\r\n             onChange={searchChange} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Input;","import React from 'react';\r\n\r\nconst Card = ({data}) => {\r\n\r\n    return (\r\n        <div className='tc bg-dark-red dib br3 pa5 ma2 grow bw2 shadow-5'>\r\n            <img alt='Robot Avatar' src={`https://robohash.org/${data.fullname}?300x300`}/>\r\n            <div>\r\n                <h2> Name: {data.fullname} </h2>\r\n                <p>Gender: {data.gender} </p>\r\n                <p>Ethnicity: {data.ethnicity} </p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport Input from '../components/Input';\nimport Card from '../components/Card';\nimport {setInput, requestData} from '../actions';\nimport './App.css';\n\n\nconst mapStateToProps = state => {\n  return{\n    input: state.sendData.input,\n    data: state.requestData.data,\n    isPending: state.requestData.isPending,\n    error: state.requestData.error\n  }\n}\n\nconst mapDispatchtoProps = (dispatch) => {\n  \n  return {\n    onSearchChange: (event) => {\n      dispatch(setInput(event.target.value))\n      dispatch(requestData(event.target.value))\n    },\n  }\n}\n\n\n\nclass App extends Component{\n  \n  \n  render(){\n    const {onSearchChange, data, isPending} = this.props\n    var dataVal = {};\n    if (isPending){\n      dataVal = {};\n    }else{\n      dataVal = data;\n    }\n    \n      return (\n        <div className='tc'>\n          <h1>Robot Avatar</h1>\n          <Input searchChange={onSearchChange} />\n          <br/><br/>\n          <Card data={dataVal} />\n        </div>\n      )\n    \n    \n  }\n}\n\nexport default connect(mapStateToProps,mapDispatchtoProps)(App);","import {\r\n    CHANGE_BUTTON_STATE,\r\n    CHANGE_SEARCH_FIELD,\r\n    DATA_REQUEST_PENDING,\r\n    DATA_REQUEST_SUCCESS,\r\n    DATA_REQUEST_FAILED\r\n} from './constants'\r\n\r\nexport const setInput = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text,\r\n    payload2: false\r\n})\r\n\r\n\r\n\r\n\r\nexport const requestData = (fullname) => (dispatch) => {\r\n    dispatch({type: DATA_REQUEST_PENDING});\r\n    fetch(`https://api.diversitydata.io/?fullname=${fullname}`)\r\n    .then(response => response.json())\r\n    .then(data => dispatch({type: DATA_REQUEST_SUCCESS, payload: data}))\r\n    .catch(error => dispatch({type: DATA_REQUEST_FAILED, payload: error}))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\r\nexport const CHANGE_BUTTON_STATE = 'CHANGE_BUTTON_STATE'\r\nexport const DATA_REQUEST_PENDING = 'DATA_REQUEST_PENDING'\r\nexport const DATA_REQUEST_SUCCESS = 'DATA_REQUEST_SUCCESS'\r\nexport const DATA_REQUEST_FAILED = 'DATA_REQUEST_FAILED'","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n    CHANGE_BUTTON_STATE,\r\n    CHANGE_SEARCH_FIELD,\r\n    DATA_REQUEST_PENDING,\r\n    DATA_REQUEST_SUCCESS,\r\n    DATA_REQUEST_FAILED\r\n} from './constants'\r\n\r\nconst initialInputState = {\r\n    input: '',\r\n    button: false\r\n}\r\n\r\nexport const sendData = (state=initialInputState, action={}) => {\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD: \r\n        return Object.assign({}, state, {input:action.payload, button:action.payload2});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nconst initialData = {\r\n    isPending: false,\r\n    data: {},\r\n    error: ''\r\n\r\n}\r\n\r\nexport const requestData = (state=initialData, action={}) => {\r\n    switch(action.type){\r\n        case DATA_REQUEST_PENDING:\r\n            return Object.assign({}, state, {isPending: true})\r\n        case DATA_REQUEST_SUCCESS:\r\n            return Object.assign({}, state, {data: action.payload, isPending: false})\r\n        case DATA_REQUEST_FAILED:\r\n            return Object.assign({}, state, {error: action.payload, isPending:false})\r\n            default:\r\n                return state;\r\n    }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons'\nimport * as serviceWorker from './serviceWorker';\nimport {sendData, requestData} from './reducers';\n\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({sendData, requestData})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\nReactDOM.render( \n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}